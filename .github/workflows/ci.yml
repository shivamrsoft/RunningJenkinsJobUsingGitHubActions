name: Build and Test

on:
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
    branches-ignore:
      - github-action-* #to allow testing of build logic in branches, don't do PR builds for github-action-* branches and instead use branch builds

  push:
    branches:
      - master
      - main
      - github-action-*

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      BranchName: ${{ steps.find-branches.outputs.BranchName }}
      BranchSha: ${{ steps.find-branches.outputs.BranchSha }}
      thisSha: ${{ steps.find-branches.outputs.thisSha }}
      thisBranchName: ${{ steps.find-branches.outputs.thisBranchName }}
      thisBranchFileName: ${{ steps.find-branches.outputs.thisBranchFileName }}
      thisRepositoryName: ${{ steps.find-branches.outputs.thisRepositoryName }}
      thisRepositoryOwner: ${{ steps.find-branches.outputs.thisRepositoryName }}
      standAlonePR: ${{ steps.find-branches.outputs.standAlonePR }}
      stable: ${{ steps.find-branches.outputs.stable }}
    steps:
      - name: Failsafe
        uses: actions/github-script@v5
        with:
          script: |
            if (${{ github.run_attempt }} % 5 == 0) {
              core.setFailed("Fail every 5 run attempts to catch accidental infinite loops");
            }
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}

      - name: Find corresponding branches
        id: find-branches
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const helper = require('./.github/util/workflow-helper.js')({github, context});
            core.setOutput("thisSha", helper.getCurrentSha());
            core.setOutput("thisBranchName", helper.getCurrentBranch());
            core.setOutput("thisBranchFileName", helper.getCurrentBranch().replace(/[^a-zA-Z0-9\-_]/g, "_"));
            core.setOutput("thisRepoName", helper.getRepositoryName());
            core.setOutput("thisRepoOwner", helper.getRepositoryOwner());
            let StatusMessage = "success";
            let Failed = false;
            let branch = await helper.findMatchingBranch("shivamrsoft", "RunningJenkinsJobUsingGitHubActions");
            //count as not a stand-alone PR for branch builds on master/main, even though there are no PRs
            if (helper.getCurrentBranch() == 'master' || helper.getCurrentBranch() == 'main' && branch.pullRequestId) {
              core.setOutput("standAlonePR", helper.getCurrentBranch() !== branch.name);
            } else {
              core.setOutput("standAlonePR", true);
            }
            if (!branch.lastSuccessfulRunNumber) {
              Failed = true;
              StatusMessage = "Matching  branch has never passed. Falling back to master"
              branch = await helper.findMatchingBranch("shivamrsoft", "RunningJenkinsJobUsingGitHubActions", ["main", "master"])
            }
            core.setOutput("BranchName", branch.name);
            core.setOutput("BranchSha", branch.sha);
            if (!Failed) {
              if (!branch.workflowId) {
                StatusMessage = "does not have a ran workflow";
                Failed = true
              } else if ( branch.runStatus != "completed") {
                StatusMessage = "build is "+ branch.runStatus;
                Failed = true
              } else if ( branch.runConclusion != "success") {
                StatusMessage = "build conclusion was "+branch.runConclusion;
                Failed = true
              }
            }
            statusMessage = "shivamrsoft/RunningJenkinsJobUsingGitHubActions:"+branch.name+"@" + branch.sha.substring(0, 7) + " " + StatusMessage;
            console.log(" failed?" + Failed + ": "+statusMessage);
            github.rest.repos.createCommitStatus({
              "owner": "shivamrsoft",
              "repo": "RunningJenkinsJobUsingGitHubActions",
              "sha": helper.getCurrentSha(),
              "state": (Failed ? "failure" : "success"),
              "target_url": branch.runHtmlUrl,
              "context": "Stable RunningJenkinsJobUsingGitHubActions",
              "description": statusMessage
            });
            core.setOutput("stable", !Failed);
